/**
 * @brief 선물 전달 게임의 산타(플레이어)
 * @author 김미성
 * @date 22-06-04
 */


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DeliverySanta : MonoBehaviour
{
    #region 변수
    private Rigidbody rigid;

    // 점프
    [SerializeField]
    private float jumpPower = 700f;
    [SerializeField]
    private float doubleJumpPower = 450f;
    [SerializeField]
    private Vector3 gravity = new Vector3(0, -800f, 0);

    private int jumpCnt = 0;

    // 선물을 나타날 위치
    public static GameObject giftPos;      

    // 캐싱
    private DeliveryGameManager deliveryGameManager;

    private ObjectPoolingManager objectPoolingManager;

    private SoundManager soundManager;
    #endregion

    #region 유니티 함수
    void Awake()
    {
        rigid = GetComponent<Rigidbody>();
        Physics.gravity = gravity;

        deliveryGameManager = DeliveryGameManager.Instance;
        objectPoolingManager = ObjectPoolingManager.Instance;
        soundManager = SoundManager.Instance;

        giftPos = this.transform.GetChild(1).gameObject;
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("Floor"))       // Floor에 닿으면 jumpCnt를 초기화
        {
            jumpCnt = 0;
        }
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.CompareTag("Obstacle"))        // 장애물에 부딪히면 생명 감소
        {
            DecreaseLife();
        }
        else if (other.gameObject.CompareTag("Reward"))     // 보상에 부딪히면 보상을 획득
        {
            GetReward(other.transform.GetComponent<DeliveryReward>());
        }
    }
    #endregion

    #region 함수
    /// <summary>
    /// 더블 점프 (인스펙터에서 호출)
    /// </summary>
    public void Jump()
    {
        if (!deliveryGameManager.isStart)
        {
            return;
        }

        if (jumpCnt == 0)
        {
            jumpCnt++;
            soundManager.PlaySoundEffect(ESoundEffectType.getGoldButton);     // 효과음 실행
            rigid.AddForce(Vector3.up * jumpPower, ForceMode.Impulse);
        }
        else if (jumpCnt == 1)
        {
            jumpCnt++;
            soundManager.PlaySoundEffect(ESoundEffectType.getGoldButton);     // 효과음 실행
            rigid.AddForce(Vector3.up * doubleJumpPower, ForceMode.Impulse);
        }
        else return;
    }

    /// <summary>
    /// Drop 버튼 클릭 시 선물을 떨어뜨림 (인스펙터에서 호출)
    /// </summary>
    public void Drop()
    {
        if (!deliveryGameManager.isStart)
        {
            return;
        }

        if (deliveryGameManager.GiftCount > 0)
        {
            soundManager.PlaySoundEffect(ESoundEffectType.uiButton);

            objectPoolingManager.Get(EObjectFlag.gift);
            deliveryGameManager.GiftCount--;
        }
    }

    /// <summary>
    /// 생명 감소
    /// </summary>
    void DecreaseLife()
    {
        soundManager.PlaySoundEffect(ESoundEffectType.deliveryObstacle);     // 효과음 실행
        deliveryGameManager.Life--;
    }

    /// <summary>
    /// 보상 획득
    /// </summary>
    void GetReward(DeliveryReward reward)
    {
        soundManager.PlaySoundEffect(ESoundEffectType.deliveryGetGift);     // 효과음 실행

        objectPoolingManager.Set(reward.gameObject, EObjectFlag.reward);     // 오브젝트 풀에 반환

        if (reward.rewardType.Equals(ERewardType.carrot))           // 보상이 당근일 때
        {
            deliveryGameManager.carrotCount++;
        }
        else if (reward.rewardType.Equals(ERewardType.puzzle))           // 보상이 퍼즐 조각일 때
        {
            deliveryGameManager.PuzzleCount++;
        }
    }
    #endregion
}
